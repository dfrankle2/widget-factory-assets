class WidgetController{constructor(t='[data-component="WidgetShell"]'){if(this.shell=document.querySelector(t),!this.shell)return void console.error('Widget shell not found. Ensure you have a component with data-component="WidgetShell"');if(this.input=this.shell.querySelector('[data-component="FileInput"] input[type=file]'),this.progressBar=this.shell.querySelector('[data-component="ProgressBar"] .progress-bar'),this.resultCard=this.shell.querySelector('[data-component="ResultCard"]'),this.widgetId=this.shell.dataset.widgetId||"",this.presignEndpoint=this.shell.dataset.presignEndpoint||"",this.processEndpoint=this.shell.dataset.processEndpoint||"",this.maxFileSize=parseInt(this.input?.dataset.maxSize||"5")*1024*1024,this.anonId=localStorage.anonId||(localStorage.anonId=crypto.randomUUID()),this.input&&this.progressBar&&this.resultCard)return this.bindEvents(),void console.log("Widget initialized with ID:",this.widgetId);console.error("Widget initialization failed: Missing required components")}bindEvents(){this.input.addEventListener("change",this.handleFileSelection.bind(this));const t=this.shell.querySelector(".dropzone");t&&(t.addEventListener("dragover",e=>{e.preventDefault(),t.classList.add("dragover")}),t.addEventListener("dragleave",()=>{t.classList.remove("dragover")}),t.addEventListener("drop",e=>{e.preventDefault(),t.classList.remove("dragover"),e.dataTransfer.files.length&&(this.input.files=e.dataTransfer.files,this.handleFileSelection({target:{files:e.dataTransfer.files}}))}))}async handleFileSelection(t){const e=Array.from(t.target.files||[]);if(!e.length)return;for(const t of e)if(t.size>this.maxFileSize)return void alert(`File ${t.name} exceeds the maximum allowed size of ${this.maxFileSize/1024/1024}MB.`);this.dispatchWidgetEvent("input:ready");const s=[],n=[];for(const t of e)try{const e=t.name.split(".").pop()||"",i=`uploads/${this.widgetId}/${crypto.randomUUID()}.${e}`;n.push(i);const{uploadUrl:a}=await this.getPresignedURL(i,t);s.push(this.uploadFile(a,t))}catch(t){return console.error("Upload preparation failed:",t),void this.dispatchWidgetEvent("process:error",{error:"Failed to prepare upload: "+t.message})}try{await Promise.all(s),this.dispatchWidgetEvent("upload:done",{keys:n}),this.processFiles(n)}catch(t){console.error("Upload failed:",t),this.dispatchWidgetEvent("process:error",{error:"Upload failed: "+t.message})}}dispatchWidgetEvent(t,e={}){const s=new CustomEvent(t,{detail:e});switch(this.shell.dispatchEvent(s),t){case"input:ready":this.progressBar.style.width="0%",this.progressBar.classList.remove("error"),this.resultCard.style.display="none";break;case"upload:progress":this.progressBar.style.width=`${e.percent}%`;break;case"upload:done":this.progressBar.style.width="100%",this.progressBar.classList.add("waiting");break;case"process:success":this.handleProcessSuccess(e);break;case"process:error":this.handleProcessError(e)}}async getPresignedURL(t,e){const s=await fetch(this.presignEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({fileKey:t,mime:e.type,size:e.size,anon_id:this.anonId,widget_id:this.widgetId})});if(!s.ok)throw new Error(`Failed to get upload URL: ${s.status}`);return await s.json()}async uploadFile(t,e){return new Promise((s,n)=>{const i=new XMLHttpRequest;i.upload.addEventListener("progress",t=>{if(t.lengthComputable){const e=Math.round(t.loaded/t.total*100);this.dispatchWidgetEvent("upload:progress",{percent:e})}}),i.addEventListener("load",()=>{i.status>=200&&i.status<300?s():n(new Error(`Upload failed with status ${i.status}`))}),i.addEventListener("error",()=>n(new Error("Network error"))),i.addEventListener("abort",()=>n(new Error("Upload aborted"))),i.open("PUT",t),e.type&&i.setRequestHeader("Content-Type",e.type),i.send(e)})}async processFiles(t){try{const e=await fetch(this.processEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({fileKey:t[0],fileKeys:t,anonId:this.anonId,widget_id:this.widgetId})});if(!e.ok)throw new Error(`Processing failed: ${e.status}`);const s=await e.json();this.dispatchWidgetEvent("process:success",s)}catch(t){console.error("Processing failed:",t),this.dispatchWidgetEvent("process:error",{error:t.message})}}handleProcessSuccess(t){this.progressBar.classList.remove("waiting");const e=this.resultCard.querySelector('[data-result="headline"]'),s=this.resultCard.querySelector('[data-result="text"]'),n=this.resultCard.querySelector('[data-result="single-link"]'),i=this.resultCard.querySelector('[data-result="link-list"]');e&&(e.textContent=t.headline||"Success!"),s&&(s.style.display="none"),n&&(n.style.display="none"),i&&(i.style.display="none");switch(t.kind){case"text":s&&(s.textContent=t.text||"",s.style.display="block");break;case"singleUrl":n&&(n.href=t.downloadUrl||"#",n.textContent=t.linkText||"Download",n.style.display="inline-block");break;case"urlArray":if(i){if(i.innerHTML="",Array.isArray(t.downloadUrls)){t.downloadUrls.forEach((t,e)=>{const s=document.createElement("a");s.href=t.url||t,s.textContent=t.label||`Result ${e+1}`,s.className="result-link",s.target="_blank";const n=document.createElement("li");n.appendChild(s),i.appendChild(n)})}i.style.display="block"}}this.resultCard.style.display="block"}handleProcessError(t){this.progressBar.classList.add("error"),this.progressBar.classList.remove("waiting");const e=this.resultCard.querySelector('[data-result="headline"]'),s=this.resultCard.querySelector('[data-result="text"]');e&&(e.textContent="Error"),s&&(s.textContent=t.error||"An error occurred",s.style.display="block");const n=this.resultCard.querySelector('[data-result="single-link"]'),i=this.resultCard.querySelector('[data-result="link-list"]');n&&(n.style.display="none"),i&&(i.style.display="none"),this.resultCard.style.display="block"}}document.addEventListener("DOMContentLoaded",()=>{document.querySelectorAll('[data-component="WidgetShell"]').forEach(t=>{const e=t.dataset.widgetId;e?new WidgetController(`[data-component="WidgetShell"][data-widget-id="${e}"]`):new WidgetController})});export default WidgetController;