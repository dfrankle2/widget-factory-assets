class WidgetController{constructor(e='[data-component="WidgetShell"]'){this.shell=document.querySelector(e),this.shell?(this.input=this.shell.querySelector('[data-component="FileInput"] input[type=file]'),this.progressBar=this.shell.querySelector('[data-component="ProgressBar"] .progress-bar')||this.shell.querySelector('[data-component="ProgressBar"] .u-progress-bar'),this.resultCard=this.shell.querySelector('[data-component="ResultCard"]'),this.widgetId=this.shell.dataset.widgetId||"",this.presignEndpoint=this.shell.dataset.presignEndpoint||"https://hook.us1.make.com/gdcgg8ryb664x79ueclrbnjpj8f7k1wn",this.processEndpoint=this.shell.dataset.processEndpoint||"https://hook.us1.make.com/mq6panopy0wdk7cuq94xkt9tf2lhriup",this.maxFileSize=1024*parseInt(this.input?.dataset.maxSize||"5")*1024,this.outputType=this.shell.dataset.outputType||"file",this.anonId=localStorage.anonId||(localStorage.anonId=crypto.randomUUID()),this.input&&this.progressBar&&this.resultCard?(this.bindEvents(),console.log("Widget initialized with ID:",this.widgetId)):console.error("Widget initialization failed: Missing required components")):console.error('Widget shell not found. Ensure you have a component with data-component="WidgetShell"')}bindEvents(){this.input.addEventListener("change",this.handleFileSelection.bind(this));let t=this.shell.querySelector(".dropzone")||this.shell.querySelector(".u-dropzone");t&&(t.addEventListener("dragover",e=>{e.preventDefault(),t.classList.add("dragover")}),t.addEventListener("dragleave",()=>{t.classList.remove("dragover")}),t.addEventListener("drop",e=>{e.preventDefault(),t.classList.remove("dragover"),e.dataTransfer.files.length&&(this.input.files=e.dataTransfer.files,this.handleFileSelection({target:{files:e.dataTransfer.files}}))}))}async handleFileSelection(e){e=e.target.files?.[0];if(e)if(e.size>this.maxFileSize)alert(`File ${e.name} exceeds the maximum allowed size of ${this.maxFileSize/1024/1024}MB.`);else{this.dispatchWidgetEvent("input:ready");var t=e.name.split(".").pop()||"",t=`uploads/${this.widgetId}/${crypto.randomUUID()}.`+t,s=this.shell.querySelector('button[type="submit"]');s&&(s.disabled=!0,s.textContent="Working…");try{this.dispatchWidgetEvent("upload:progress",{percent:5});var r=(await this.getPresignedURL(t,e)).uploadUrl;await this.uploadFile(r,e),this.dispatchWidgetEvent("upload:progress",{percent:45}),await this.processFiles([t]),this.dispatchWidgetEvent("upload:progress",{percent:100})}catch(e){console.error("Upload failed:",e),this.dispatchWidgetEvent("process:error",{error:"Upload failed: "+e.message})}finally{s&&(s.disabled=!1,s.textContent="Submit")}}else alert("Choose a file")}dispatchWidgetEvent(e,t={}){var s=new CustomEvent(e,{detail:t});switch(this.shell.dispatchEvent(s),e){case"input:ready":this.progressBar.style.width="0%",this.progressBar.classList.remove("error"),this.resultCard.style.display="none";break;case"upload:progress":this.progressBar.style.width=t.percent+"%";break;case"upload:done":this.progressBar.style.width="100%",this.progressBar.classList.add("waiting");break;case"process:success":break;case"process:error":this.handleProcessError(t)}}async getPresignedURL(e,t){e=await fetch(this.presignEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({fileKey:e,mime:t.type,size:t.size,anon_id:this.anonId,widget_id:this.widgetId})});if(e.ok)return e.json();throw new Error("Failed to get upload URL: "+e.status)}async uploadFile(r,a){return new Promise((e,t)=>{let s=new XMLHttpRequest;s.upload.addEventListener("progress",e=>{e.lengthComputable&&(e=Math.round(e.loaded/e.total*100),this.dispatchWidgetEvent("upload:progress",{percent:e}))}),s.addEventListener("load",()=>{200<=s.status&&s.status<300?e():t(new Error("Upload failed with status "+s.status))}),s.addEventListener("error",()=>t(new Error("Network error"))),s.addEventListener("abort",()=>t(new Error("Upload aborted"))),s.open("PUT",r),a.type&&s.setRequestHeader("Content-Type",a.type),s.send(a)})}async processFiles(t){try{var e=await fetch(this.processEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({fileKey:t[0],anonId:this.anonId,widget_id:this.widgetId})});if(!e.ok)throw new Error("Processing failed: "+e.status);await this.handleResponse(e)}catch(e){console.error("Processing failed:",e),this.dispatchWidgetEvent("process:error",{error:e.message});t=this.resultCard.querySelector('[data-result="text"]');t&&(t.textContent="❌ "+e.message,t.style.display="block",t.classList.add("widget-error")),this.resultCard.style.display="block"}}async handleResponse(t){this.progressBar.classList.remove("waiting");this.resultCard.querySelector('[data-result="headline"]');var e=this.resultCard.querySelector('[data-result="text"]'),s=this.resultCard.querySelector(".widget-copy")||this.resultCard.querySelector(".u-widget-copy")||this.resultCard.querySelector('[data-action="copy"]');switch(e&&e.classList.remove("widget-error"),this.outputType){case"text":e&&(e.textContent=await t.text(),e.style.display="block"),s&&(s.style.display="inline-block");break;case"json":var r=await t.json();e&&(r=r&&"object"==typeof r&&"text"in r?r.text:JSON.stringify(r,null,2),e.textContent=r,e.style.display="block"),s&&(s.style.display="inline-block");break;default:{var r=(t.headers.get("content-type")||"").startsWith("application/json");let e;e=r?(await t.json()).downloadUrl:(r=await t.blob(),URL.createObjectURL(r)),this.injectDownloadButton(e);break}}this.resultCard.style.display="block",this.dispatchWidgetEvent("process:success",{outputType:this.outputType,response:t})}injectDownloadButton(e){var t,s;e&&((t=this.resultCard.querySelector('[data-result="single-link"]'))?(t.href=e,t.style.display="inline-block",e.startsWith("blob:")&&t.addEventListener("click",()=>{setTimeout(()=>URL.revokeObjectURL(e),3e3)},{once:!0})):(t=this.shell.dataset.ctaLabel||"Download",(s=document.createElement("a")).href=e,s.textContent=t,s.className="widget-download u-widget-download",s.target="_blank",this.shell.dataset.fnameTpl&&(s.download=this.shell.dataset.fnameTpl.replace("{{slug}}",this.shell.dataset.slug||"file")),this.resultCard.insertAdjacentElement("beforeend",s),e.startsWith("blob:")&&s.addEventListener("click",()=>{setTimeout(()=>URL.revokeObjectURL(e),3e3)},{once:!0})))}handleProcessError(e){this.progressBar.classList.add("error"),this.progressBar.classList.remove("waiting");var t=this.resultCard.querySelector('[data-result="headline"]'),s=this.resultCard.querySelector('[data-result="text"]'),t=(t&&(t.textContent="Error"),s&&(s.textContent=e.error||"An error occurred",s.style.display="block"),this.resultCard.querySelector('[data-result="single-link"]')),e=this.resultCard.querySelector('[data-result="link-list"]');t&&(t.style.display="none"),e&&(e.style.display="none"),this.resultCard.style.display="block"}}document.addEventListener("DOMContentLoaded",()=>{document.querySelectorAll('[data-component="WidgetShell"]').forEach(e=>{e=e.dataset.widgetId;e?new WidgetController(`[data-component="WidgetShell"][data-widget-id="${e}"]`):new WidgetController})});export default WidgetController;